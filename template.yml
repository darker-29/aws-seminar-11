AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Seminar 13 Template

Parameters:
  VpcCidr:
    Type: String

  Environment:
    Type: String

  MyIPCidr:
    Type: String

  EC2SSHKey:
    Type: String




Resources:


####################################################################
# Network (VPC, InternetGateway, Subnet, RouteTable, Route)
####################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-vpc


  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-igw


  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  PublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref AWS::Region ]
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcCidr, 1, 8 ] ]
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-publicsubnet-1a


  PublicRouteTable1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-rt-1a


  PublicRoute1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1a
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0


  SubnetRouteTable1aAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1a
      SubnetId: !Ref PublicSubnet1a


  PublicSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref AWS::Region ]
      CidrBlock: !Select [ 1, !Cidr [ !Ref VpcCidr, 2, 8 ] ]
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-publicsubnet-1c


  PublicRouteTable1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-rt-1c


  PublicRoute1c:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1c
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0


  SubnetRouteTable1cAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1c
      SubnetId: !Ref PublicSubnet1c



####################################################################
# EC2 (SecurityGroup, EC2Instance)
####################################################################

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-ec2-sg
      GroupDescription: !Sub Security Group for ${Environment} EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCidr
          Description: Allow Access to 80 port from VpcCidr
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Ref MyIPCidr
          Description: Allow Access to 22 port from restricted own Ip
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ec2-sg


  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [ 0 , "Fn::GetAZs": !Ref AWS::Region  ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: false
      ImageId: ami-0bc23e4337e8bc5ea
      InstanceType: t3.nano
      KeyName: !Ref EC2SSHKey
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet1a
          DeviceIndex: 0
          GroupSet:
            - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ec2
      UserData: !Base64 |
        #!/bin/bash

        yum -y update
        yum -y install httpd
        systemctl start httpd



####################################################################
# LoadBalancer
####################################################################

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-alb-sg
      GroupDescription: !Sub Security Group for ${Environment} ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow Access to 80 port from Anywhere
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-alb-sg


  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Environment}-alb-tg
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref EC2Instance
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-alb-tg



  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Environment}-alb
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1a
        - !Ref PublicSubnet1c
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-alb



  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward



